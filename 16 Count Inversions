Question 16 Count Inversions

# Optimal approach of count inversion
def merge(arr,low,mid,high):
    temp=[]  #temporary array
    left=low #starting index of left half of arr
    right=mid+1 #starting index of right half of arr

    cnt = 0     # Modification 1: cnt variable to count the pairs

    # storing elements in the temporary array in a sorted manner
    while(left<=mid and right<=high):
        if(arr[left]<=arr[right]):
            temp.append(arr[left])
            left+=1
        else:
            temp.append(arr[right])
            cnt +=(mid-left+1) # Modification 2
            right+=1
    #if elements on the left half are still left 
    while(left<=mid):
        temp.append(arr[left])
        left+=1
    #if elements on the right half are still left 
    while(right<=high):
        temp.append(arr[right])
        right+=1
    #transfering all elements from temporary to arr
    for i in range(low,high+1,1):
        arr[i]=temp[i-low]
    return cnt # Modification 3
    
    
def mergesort(arr,low,high):
    cnt=0
    if(low>=high):
        return cnt
    mid=int((low+high)/2)
    cnt += mergesort(arr,low,mid)  # left half
    cnt +=mergesort(arr,mid+1,high) # right half
    cnt +=merge(arr,low,mid,high)  #merging sorted halves

    return cnt

def numberOfInversions(arr ,n):
    # Count the number of pairs:
    n = len(arr)
    # Count the number of pairs:
    return mergesort(arr, 0, n - 1)

if __name__ == "__main__":
    a = [5, 4, 3, 2, 1]
    # expected output 10
    n = 5
    cnt = numberOfInversions(a, n)
    print("The number of inversions are:", cnt)


# Time:  O(nlogn) 
# Space: O(n)
